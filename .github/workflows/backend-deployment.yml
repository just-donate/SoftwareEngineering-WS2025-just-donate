name: Backend Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build and Test
        working-directory: backend
        run: ./gradlew clean build

  build-image:
    name: Build Docker image
    runs-on: self-hosted
    needs: [ build ]
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(grep "^version\s*=" backend/build.gradle | sed -E 's/version\s*=\s*["'\'']([^"\'']+)["'\'']/\1/')
          echo "Version found: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ env.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ env.VERSION }}
  

  deploy:
    name: Deploy Backend
    runs-on: self-hosted
    needs: [ build-image ]
    steps:

      - name: Create deployment folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set ENV variable and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker compose -f docker-compose.yml pull -q
          docker compose -f docker-compose.yml up -d
          EOF